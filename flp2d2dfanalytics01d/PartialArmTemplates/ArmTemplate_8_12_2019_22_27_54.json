{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "flp2d2dfanalytics01d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pattos Pipeline to Oracle On-Prem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extract data from an Azure SQL DB into parquet files in Azure Blob Storage (ADLS Gen 2).\n\nUse a For Each loop operating in parallel mode.\n\nFor debugging purposes, you can simulate \n JSON array with:\n \n[{\"ProductNumber\" : \"HL-U509\"},{\"ProductNumber\" : \"FR-R92R-62\"}]",
				"activities": [
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process Entities",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Import Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@activity('Translate JSON Variables').output.result.ExtractQuery",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "OracleDB_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"Host": {
													"value": "@activity('Translate JSON Variables').output.result.Host",
													"type": "Expression"
												},
												"Port": {
													"value": "@activity('Translate JSON Variables').output.result.Port",
													"type": "Expression"
												},
												"SID": {
													"value": "@activity('Translate JSON Variables').output.result.SID",
													"type": "Expression"
												},
												"Username": {
													"value": "@activity('Translate JSON Variables').output.result.Username",
													"type": "Expression"
												},
												"Password": {
													"value": "@activity('Translate JSON Variables').output.result.Password",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetBlobStorage_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Save to History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Rows read: @{activity('Import Data').output.rowsRead} | Rows written: @{activity('Import Data').output.rowsCopied}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Import Data').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Save to History",
									"description": "Save to History if required.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Translate JSON Variables').output.result.SaveToHistory, 'True')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Add DataDate and Save to History",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "Lookup the Data Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/Analytics/_Add DataDate and Save to History",
													"baseParameters": {
														"Scope": {
															"value": "@activity('Translate JSON Variables').output.result.Scope",
															"type": "Expression"
														},
														"SourceSystem": {
															"value": "@activity('Translate JSON Variables').output.result.SourceSystem",
															"type": "Expression"
														},
														"Entity": {
															"value": "@activity('Translate JSON Variables').output.result.EntityName",
															"type": "Expression"
														},
														"DataDate": {
															"value": "@string(activity('Lookup the Data Date').output.firstRow.DataDate)",
															"type": "Expression"
														},
														"FileFormat": {
															"value": "@activity('Translate JSON Variables').output.result.FileFormat",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Lookup the Data Date",
												"description": "Read the Control table that specifies which date this data pertains to.",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@activity('Translate JSON Variables').output.result.DataDateQuery",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "ControlDB_Dataset",
														"type": "DatasetReference"
													}
												}
											}
										]
									}
								},
								{
									"name": "Indicate Failure 2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Save to History",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Save to History').errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "7"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "10"
					}
				},
				"folder": {
					"name": "Experimentation"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleDB_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleDB_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OracleDB",
					"type": "LinkedServiceReference",
					"parameters": {
						"Host": {
							"value": "@dataset().Host",
							"type": "Expression"
						},
						"Port": {
							"value": "@dataset().Port",
							"type": "Expression"
						},
						"SID": {
							"value": "@dataset().SID",
							"type": "Expression"
						},
						"Username": {
							"value": "@dataset().Username",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Host": {
						"type": "string"
					},
					"Port": {
						"type": "string"
					},
					"SID": {
						"type": "string"
					},
					"Username": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Reset Processing Framework')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Reset to False the HasProcessed and IsProcessing flags of the Process.Entity table.  This will prepare the Processing Framework to begin once local time has passed midnight (handled by another Trigger).",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 9 - Execute Query in Control Database",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "6"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T22:06:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								35,
								45
							],
							"hours": [
								12,
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/_Process Type 9 - Execute Query in Control Database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Start of Day Processing')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The trigger is looking for Start of Day (once local time has clocked past midnight).  When this happens, it allows the Process Framework to begin for the day.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 9 - Execute Sproc in Control Database",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "5"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "_Process Type 9 - Execute Query in Control Database",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "5"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T22:02:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								35,
								45
							],
							"hours": [
								13,
								14
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/_Process Type 9 - Execute Query in Control Database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 9 - Execute Query in Control Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute a Query in the Control Database.\n\nIt is assumed that the query will return a recordset with two columns: Result (tinyint) and Message (varchar).  If Result is 0, the query is assumed to have executed successfully and HasProcessed will be set to 1.  If Result is 1, the query is assumed to have not run successfully and thus HasProcessed will not be set. ",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute Query",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('Translate JSON Variables').output.result.QueryToExecute",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Check Query Execution Result",
									"description": "The Query is assumed to return a single row recordset containing two columns, Result and Message.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Execute Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Execute Query').output.firstRow.Result, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Indicate Failure 2",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
													"storedProcedureParameters": {
														"EntityKey": {
															"value": {
																"value": "@item().EntityKey",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"ExecutionMessage": {
															"value": {
																"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute}' - @{activity('Execute Query').output.firstRow.Message}",
																"type": "Expression"
															},
															"type": "String"
														},
														"Result": {
															"value": "Failure",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ControlDB",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Indicate Success",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
													"storedProcedureParameters": {
														"EntityKey": {
															"value": {
																"value": "@item().EntityKey",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Result": {
															"value": "Success",
															"type": "String"
														},
														"ExecutionMessage": {
															"value": {
																"value": "Success in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute}' - @{activity('Execute Query').output.firstRow.Message}",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ControlDB",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Indicate Failure 1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Query",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute}' - @{activity('Execute Query').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "5"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "9"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}