{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "flp2d2dfanalytics01d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Pattos Pipeline to Oracle On-Prem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extract data from an Azure SQL DB into parquet files in Azure Blob Storage (ADLS Gen 2).\n\nUse a For Each loop operating in parallel mode.\n\nFor debugging purposes, you can simulate \n JSON array with:\n \n[{\"ProductNumber\" : \"HL-U509\"},{\"ProductNumber\" : \"FR-R92R-62\"}]",
				"activities": [
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process Entities",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Extract Control Applies",
									"description": "If the Variable ExtractControlQuery is not blank, execute this query to return a value for Extract Control.  This is used only in incremental/changeset type extracts.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Translate JSON Variables').output.result.ExtractControlQuery, '')) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Lookup the Next Extract Control",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@activity('Translate JSON Variables').output.result.ExtractControlQuery",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "AzureSqlDB_Dataset",
														"type": "DatasetReference",
														"parameters": {
															"DatabaseServerName": {
																"value": "@activity('Translate JSON Variables').output.result.DatabaseServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@activity('Translate JSON Variables').output.result.DatabaseName",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Import Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "If Extract Control Applies",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "OracleDB_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetBlobStorage_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Rows read: @{activity('Import Data').output.rowsRead} | Rows written: @{activity('Import Data').output.rowsCopied}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Import Data').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Incremental Set Next Extract Control",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Indicate Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Translate JSON Variables').output.result.ExtractControlQuery, '')) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set Next Extract Control Value",
												"description": "Update the ExtractControl for this Process Entity",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[Process].[up_SetOverrideVariable]",
													"storedProcedureParameters": {
														"EntityKey": {
															"value": {
																"value": "@item().EntityKey",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"VariableName": {
															"value": "$.ExtractControl",
															"type": "String"
														},
														"VariableValue": {
															"value": {
																"value": "@string(activity('Lookup the Next Extract Control').output.firstRow.ExtractControl)",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ControlDB",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "2"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "10"
					}
				},
				"folder": {
					"name": "Inactive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleDB_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleDB_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PASOnPremiseOracleDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"typeProperties": {
					"tableName": "\"APEX_030200\".\"APEX_APPLICATIONS\""
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Research Now - Source to Data Lake')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Research Now",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 7 - ETL - REST API to Data Lake",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "3"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T08:54:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0,
								15,
								30,
								45
							],
							"hours": [
								14,
								15,
								16,
								17,
								18
							]
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}