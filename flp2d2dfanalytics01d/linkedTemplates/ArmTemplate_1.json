{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "flp2d2dfanalytics01d"
		},
		"Trigger - Research Now_properties__Process Type 7 - ETL - REST API to Data Lake_parameters_EntityGroupKeyList": {
			"type": "string",
			"defaultValue": "3"
		},
		"Trigger - Reset Processing Framework_properties__Process Type 9 - Execute Sproc in Control Database_parameters_EntityGroupKeyList": {
			"type": "string",
			"defaultValue": "6"
		},
		"Trigger - Start of Day Processing_properties__Process Type 9 - Execute Sproc in Control Database_parameters_EntityGroupKeyList": {
			"type": "string",
			"defaultValue": "5"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 3 - Apply Changeset to Delta Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process the Changeset into the Delta Table.\n",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Process Changeset into Delta Lake",
									"description": "This Notebook will process the Changeset into the Databricks Delta Table.",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Lookup the Data Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Analytics/_Process Changeset into Delta Table",
										"baseParameters": {
											"SourceSystem": {
												"value": "@activity('Translate JSON Variables').output.result.SourceSystem",
												"type": "Expression"
											},
											"Entity": {
												"value": "@activity('Translate JSON Variables').output.result.EntityName",
												"type": "Expression"
											},
											"PrimaryKeyColumnList": {
												"value": "@activity('Translate JSON Variables').output.result.PrimaryKeyColumnList",
												"type": "Expression"
											},
											"Scope": {
												"value": "@activity('Translate JSON Variables').output.result.Scope",
												"type": "Expression"
											},
											"DataDate": {
												"value": "@string(activity('Lookup the Data Date').output.firstRow.DataDate)",
												"type": "Expression"
											},
											"DatasetType": {
												"value": "@activity('Translate JSON Variables').output.result.DatasetType",
												"type": "Expression"
											},
											"PartitionColumn": {
												"value": "@activity('Translate JSON Variables').output.result.PartitionColumn",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Process Changeset into Delta Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Success in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' - Databricks Runsheet URL: @{activity('Process Changeset into Delta Lake').output.runPageUrl} | Runtime (ms):  @{activity('Process Changeset into Delta Lake').output.executionDuration}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Process Changeset into Delta Lake",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' - Databricks Runsheet URL: @{activity('Process Changeset into Delta Lake').output.runPageUrl} | Runtime (ms):  @{activity('Process Changeset into Delta Lake').output.executionDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Lookup the Data Date",
									"description": "Read the Control table that specifies which date this data pertains to.",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('Translate JSON Variables').output.result.DataDateQuery",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 4 - Apply Changeset to Data Warehouse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process the Changeset into the Data Warehouse.\n",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Merge Staging into DataWarehouse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Rows read: @{activity('Copy Changeset to Staging Table').output.rowsRead} | Rows written: @{activity('Copy Changeset to Staging Table').output.rowsCopied}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure in Copy",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Changeset to Staging Table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Copy Changeset to Staging Table').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Lookup the Data Date",
									"description": "Read the Control table that specifies which date this data pertains to.",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('Translate JSON Variables').output.result.DataDateQuery",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy Changeset to Staging Table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup the Data Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSetting",
												"recursive": false,
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE [@{activity('Translate JSON Variables').output.result.SourceSystem}].[@{activity('Translate JSON Variables').output.result.EntityName}_Staging]",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ParquetBlobStorage_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Changeset",
													"type": "Expression"
												},
												"FileName": {
													"value": "@toLower('')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataWarehouseDB_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "[[@{activity('Translate JSON Variables').output.result.SourceSystem}].[@{activity('Translate JSON Variables').output.result.EntityName}_Staging]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Merge Staging into DataWarehouse",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Changeset to Staging Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[@{activity('Translate JSON Variables').output.result.SourceSystem}].[up_Merge_@{activity('Translate JSON Variables').output.result.EntityName}]",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"DataDate": {
												"value": {
													"value": "@activity('Lookup the Data Date').output.firstRow.DataDate",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DataWarehouseDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure in Merge",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Merge Staging into DataWarehouse",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Merge Staging into DataWarehouse').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "2"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "4"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 5 - Execute Sproc in Data Warehouse Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute a Stored Procedure in the Data Warehouse Database.",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Decorator",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.DecoratorSproc} - Success",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute Decorator",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "If Extract Control Applies",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@{activity('Translate JSON Variables').output.result.DecoratorSproc}",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"ExtractControl": {
												"value": {
													"value": "@if(equals(activity('Translate JSON Variables').output.result.ExtractControl, ''), null, activity('Translate JSON Variables').output.result.ExtractControl) ",
													"type": "Expression"
												},
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DataWarehouseDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure in Merge",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Decorator",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Decorator Sproc '@{activity('Translate JSON Variables').output.result.DecoratorSproc}' | @{activity('Execute Decorator').Error.message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Extract Control Applies",
									"description": "If the Variable ExtractControlQuery is not blank, execute this query to return a value for Extract Control.  This is used only in incremental/changeset type extracts.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Translate JSON Variables').output.result.ExtractControlQuery, '')) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Lookup the Next Extract Control",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@activity('Translate JSON Variables').output.result.ExtractControlQuery",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "DataWarehouseDB_Dataset",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@toLower('')",
																"type": "Expression"
															}
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set Next Extract Control",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Indicate Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Translate JSON Variables').output.result.ExtractControlQuery, '')) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set Next Extract Control Value",
												"description": "Update the ExtractControl for this Process Entity",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[Process].[up_SetOverrideVariable]",
													"storedProcedureParameters": {
														"EntityKey": {
															"value": {
																"value": "@item().EntityKey",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"VariableName": {
															"value": "$.ExtractControl",
															"type": "String"
														},
														"VariableValue": {
															"value": {
																"value": "@string(activity('Lookup the Next Extract Control').output.firstRow.ExtractControl)",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ControlDB",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "2"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "5"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 6  - Json File to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extract data from an Json File into parquet files in Azure Blob Storage (ADLS Gen 2).\n\nUse a For Each loop operating in parallel mode.\n\nFor debugging purposes, you can simulate \n JSON array with:\n \n[{\"ProductNumber\" : \"HL-U509\"},{\"ProductNumber\" : \"FR-R92R-62\"}]",
				"activities": [
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process Entities",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Import Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureBlobFSSource",
											"recursive": true
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSetting"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "JsonFile_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@activity('Translate JSON Variables').output.result.FilePath",
													"type": "Expression"
												},
												"FileName": {
													"value": "@activity('Translate JSON Variables').output.result.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetBlobStorage_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Rows read: @{activity('Import Data').output.rowsRead} | Rows written: @{activity('Import Data').output.rowsCopied}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Import Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Import Data').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "6"
					}
				},
				"folder": {
					"name": "Inactive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 7 - ETL - REST API to Data Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extract data from a REST API and save in JSON format in Azure Data Lake.",
				"activities": [
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process Entities",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Save to History",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Pages read: @{add(int(activity('Get all other pages from REST API').output.rowsRead), 1)} | Pages written: @{add(int(activity('Get all other pages from REST API').output.rowsCopied), 1)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure 2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get all other pages from REST API",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Get all other pages from REST API').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get the first page from REST API",
									"description": "A dummy NextPageUrl is used to ensure that only a single page is returned.  The other pages are returned in the second GET from the REST API.  \nThis is done since there is no way (yet) to use an expression in the determination of NextPageUrl and the nature of the JSON response may make it hard to determine the right JSON node to use for NextPageUrl without an expression.  ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"schemaMapping": {
												"$.pageInformation.offset": "$.pageInformation.offset",
												"$.pageInformation.size": "$.pageInformation.size",
												"pureId": "pureId",
												"externalId": "externalId",
												"externalIdSource": "externalIdSource",
												"uuid": "uuid",
												"title": "title",
												"peerReview": "peerReview",
												"numberOfPages": "numberOfPages",
												"managingOrganisationalUnit.uuid": "managingOrganisationalUnit.uuid",
												"managingOrganisationalUnit.link.ref": "managingOrganisationalUnit.link.ref",
												"managingOrganisationalUnit.link.href": "managingOrganisationalUnit.link.href",
												"managingOrganisationalUnit.externalId": "managingOrganisationalUnit.externalId",
												"managingOrganisationalUnit.externalIdSource": "managingOrganisationalUnit.externalIdSource",
												"managingOrganisationalUnit.names[0].value": "managingOrganisationalUnit.names[0].value",
												"managingOrganisationalUnit.types[0].value": "managingOrganisationalUnit.types[0].value",
												"managingOrganisationalUnit.types[0].pureId": "managingOrganisationalUnit.types[0].pureId",
												"managingOrganisationalUnit.types[0].uri": "managingOrganisationalUnit.types[0].uri",
												"confidential": "confidential",
												"info.createdBy": "info.createdBy",
												"info.createdDate": "info.createdDate",
												"info.modifiedBy": "info.modifiedBy",
												"info.modifiedDate": "info.modifiedDate",
												"info.portalUrl": "info.portalUrl",
												"info.additionalExternalIds[0].value": "info.additionalExternalIds[0].value",
												"info.additionalExternalIds[0].idSource": "info.additionalExternalIds[0].idSource",
												"pages": "pages",
												"volume": "volume",
												"journalAssociation.pureId": "journalAssociation.pureId",
												"journalAssociation.title.value": "journalAssociation.title.value",
												"journalAssociation.issn.value": "journalAssociation.issn.value",
												"journalAssociation.journal.uuid": "journalAssociation.journal.uuid",
												"journalAssociation.journal.link.ref": "journalAssociation.journal.link.ref",
												"journalAssociation.journal.link.href": "journalAssociation.journal.link.href",
												"journalAssociation.journal.externalId": "journalAssociation.journal.externalId",
												"journalAssociation.journal.externalIdSource": "journalAssociation.journal.externalIdSource",
												"journalAssociation.journal.names[0].value": "journalAssociation.journal.names[0].value",
												"journalAssociation.journal.types[0].value": "journalAssociation.journal.types[0].value",
												"journalAssociation.journal.types[0].pureId": "journalAssociation.journal.types[0].pureId",
												"journalAssociation.journal.types[0].uri": "journalAssociation.journal.types[0].uri",
												"journalNumber": "journalNumber",
												"totalNumberOfAuthors": "totalNumberOfAuthors",
												"types[0].value": "types[0].value",
												"types[0].pureId": "types[0].pureId",
												"types[0].uri": "types[0].uri",
												"categories[0].value": "categories[0].value",
												"categories[0].pureId": "categories[0].pureId",
												"categories[0].uri": "categories[0].uri",
												"publicationStatuses[0].pureId": "publicationStatuses[0].pureId",
												"publicationStatuses[0].externalId": "publicationStatuses[0].externalId",
												"publicationStatuses[0].externalIdSource": "publicationStatuses[0].externalIdSource",
												"publicationStatuses[0].current": "publicationStatuses[0].current",
												"publicationStatuses[0].publicationDate.year": "publicationStatuses[0].publicationDate.year",
												"publicationStatuses[0].publicationStatuses[0].value": "publicationStatuses[0].publicationStatuses[0].value",
												"publicationStatuses[0].publicationStatuses[0].pureId": "publicationStatuses[0].publicationStatuses[0].pureId",
												"publicationStatuses[0].publicationStatuses[0].uri": "publicationStatuses[0].publicationStatuses[0].uri",
												"languages[0].value": "languages[0].value",
												"languages[0].pureId": "languages[0].pureId",
												"languages[0].uri": "languages[0].uri",
												"personAssociations[0].pureId": "personAssociations[0].pureId",
												"personAssociations[0].externalPerson.uuid": "personAssociations[0].externalPerson.uuid",
												"personAssociations[0].externalPerson.link.ref": "personAssociations[0].externalPerson.link.ref",
												"personAssociations[0].externalPerson.link.href": "personAssociations[0].externalPerson.link.href",
												"personAssociations[0].externalPerson.externalId": "personAssociations[0].externalPerson.externalId",
												"personAssociations[0].externalPerson.externalIdSource": "personAssociations[0].externalPerson.externalIdSource",
												"personAssociations[0].externalPerson.names[0].value": "personAssociations[0].externalPerson.names[0].value",
												"personAssociations[0].externalPerson.types[0].value": "personAssociations[0].externalPerson.types[0].value",
												"personAssociations[0].externalPerson.types[0].pureId": "personAssociations[0].externalPerson.types[0].pureId",
												"personAssociations[0].externalPerson.types[0].uri": "personAssociations[0].externalPerson.types[0].uri",
												"personAssociations[0].name.firstName": "personAssociations[0].name.firstName",
												"personAssociations[0].name.lastName": "personAssociations[0].name.lastName",
												"personAssociations[0].personRoles[0].value": "personAssociations[0].personRoles[0].value",
												"personAssociations[0].personRoles[0].pureId": "personAssociations[0].personRoles[0].pureId",
												"personAssociations[0].personRoles[0].uri": "personAssociations[0].personRoles[0].uri",
												"personAssociations[0].externalOrganisations[0].uuid": "personAssociations[0].externalOrganisations[0].uuid",
												"personAssociations[0].externalOrganisations[0].link.ref": "personAssociations[0].externalOrganisations[0].link.ref",
												"personAssociations[0].externalOrganisations[0].link.href": "personAssociations[0].externalOrganisations[0].link.href",
												"personAssociations[0].externalOrganisations[0].externalId": "personAssociations[0].externalOrganisations[0].externalId",
												"personAssociations[0].externalOrganisations[0].externalIdSource": "personAssociations[0].externalOrganisations[0].externalIdSource",
												"personAssociations[0].externalOrganisations[0].names[0].value": "personAssociations[0].externalOrganisations[0].names[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].value": "personAssociations[0].externalOrganisations[0].types[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].pureId": "personAssociations[0].externalOrganisations[0].types[0].pureId",
												"personAssociations[0].externalOrganisations[0].types[0].uri": "personAssociations[0].externalOrganisations[0].types[0].uri",
												"organisationalUnits[0].uuid": "organisationalUnits[0].uuid",
												"organisationalUnits[0].link.ref": "organisationalUnits[0].link.ref",
												"organisationalUnits[0].link.href": "organisationalUnits[0].link.href",
												"organisationalUnits[0].externalId": "organisationalUnits[0].externalId",
												"organisationalUnits[0].externalIdSource": "organisationalUnits[0].externalIdSource",
												"organisationalUnits[0].names[0].value": "organisationalUnits[0].names[0].value",
												"organisationalUnits[0].types[0].value": "organisationalUnits[0].types[0].value",
												"organisationalUnits[0].types[0].pureId": "organisationalUnits[0].types[0].pureId",
												"organisationalUnits[0].types[0].uri": "organisationalUnits[0].types[0].uri",
												"externalOrganisations[0].uuid": "externalOrganisations[0].uuid",
												"externalOrganisations[0].link.ref": "externalOrganisations[0].link.ref",
												"externalOrganisations[0].link.href": "externalOrganisations[0].link.href",
												"externalOrganisations[0].externalId": "externalOrganisations[0].externalId",
												"externalOrganisations[0].externalIdSource": "externalOrganisations[0].externalIdSource",
												"externalOrganisations[0].names[0].value": "externalOrganisations[0].names[0].value",
												"externalOrganisations[0].types[0].value": "externalOrganisations[0].types[0].value",
												"externalOrganisations[0].types[0].pureId": "externalOrganisations[0].types[0].pureId",
												"externalOrganisations[0].types[0].uri": "externalOrganisations[0].types[0].uri",
												"openAccessPermissions[0].value": "openAccessPermissions[0].value",
												"openAccessPermissions[0].pureId": "openAccessPermissions[0].pureId",
												"openAccessPermissions[0].uri": "openAccessPermissions[0].uri",
												"keywordGroups[0].pureId": "keywordGroups[0].pureId",
												"keywordGroups[0].logicalName": "keywordGroups[0].logicalName",
												"keywordGroups[0].types[0].value": "keywordGroups[0].types[0].value",
												"keywordGroups[0].types[0].uri": "keywordGroups[0].types[0].uri",
												"keywordGroups[0].keywordContainers[0].pureId": "keywordGroups[0].keywordContainers[0].pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.pureId": "keywordGroups[0].keywordContainers[0].structuredKeyword.pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.uri": "keywordGroups[0].keywordContainers[0].structuredKeyword.uri",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.disabled": "keywordGroups[0].keywordContainers[0].structuredKeyword.disabled",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value",
												"visibilities[0].value": "visibilities[0].value",
												"visibilities[0].key": "visibilities[0].key",
												"workflows[0].value": "workflows[0].value",
												"workflows[0].workflowStep": "workflows[0].workflowStep",
												"$.navigationLinks[0].ref": "$.navigationLinks[0].ref",
												"$.navigationLinks[0].href": "$.navigationLinks[0].href"
											},
											"collectionReference": "$.items"
										}
									},
									"inputs": [
										{
											"referenceName": "REST_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"RelativeUrl": {
													"value": "@activity('Translate JSON Variables').output.result.RelativeUrl",
													"type": "Expression"
												},
												"PaginationJsonPath": "$.dummy-no-paging",
												"ApiKey": {
													"value": "@activity('Translate JSON Variables').output.result.ApiKey",
													"type": "Expression"
												},
												"Authorization": {
													"value": "@activity('Translate JSON Variables').output.result.Authorization",
													"type": "Expression"
												},
												"BaseUrl": {
													"value": "@activity('Translate JSON Variables').output.result.BaseUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JsonFile_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}-page1.json",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get all other pages from REST API",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get the first page from REST API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"schemaMapping": {
												"$.pageInformation.offset": "$.pageInformation.offset",
												"$.pageInformation.size": "$.pageInformation.size",
												"pureId": "pureId",
												"externalId": "externalId",
												"externalIdSource": "externalIdSource",
												"uuid": "uuid",
												"title": "title",
												"peerReview": "peerReview",
												"numberOfPages": "numberOfPages",
												"managingOrganisationalUnit.uuid": "managingOrganisationalUnit.uuid",
												"managingOrganisationalUnit.link.ref": "managingOrganisationalUnit.link.ref",
												"managingOrganisationalUnit.link.href": "managingOrganisationalUnit.link.href",
												"managingOrganisationalUnit.externalId": "managingOrganisationalUnit.externalId",
												"managingOrganisationalUnit.externalIdSource": "managingOrganisationalUnit.externalIdSource",
												"managingOrganisationalUnit.names[0].value": "managingOrganisationalUnit.names[0].value",
												"managingOrganisationalUnit.types[0].value": "managingOrganisationalUnit.types[0].value",
												"managingOrganisationalUnit.types[0].pureId": "managingOrganisationalUnit.types[0].pureId",
												"managingOrganisationalUnit.types[0].uri": "managingOrganisationalUnit.types[0].uri",
												"confidential": "confidential",
												"info.createdBy": "info.createdBy",
												"info.createdDate": "info.createdDate",
												"info.modifiedBy": "info.modifiedBy",
												"info.modifiedDate": "info.modifiedDate",
												"info.portalUrl": "info.portalUrl",
												"info.additionalExternalIds[0].value": "info.additionalExternalIds[0].value",
												"info.additionalExternalIds[0].idSource": "info.additionalExternalIds[0].idSource",
												"pages": "pages",
												"volume": "volume",
												"journalAssociation.pureId": "journalAssociation.pureId",
												"journalAssociation.title.value": "journalAssociation.title.value",
												"journalAssociation.issn.value": "journalAssociation.issn.value",
												"journalAssociation.journal.uuid": "journalAssociation.journal.uuid",
												"journalAssociation.journal.link.ref": "journalAssociation.journal.link.ref",
												"journalAssociation.journal.link.href": "journalAssociation.journal.link.href",
												"journalAssociation.journal.externalId": "journalAssociation.journal.externalId",
												"journalAssociation.journal.externalIdSource": "journalAssociation.journal.externalIdSource",
												"journalAssociation.journal.names[0].value": "journalAssociation.journal.names[0].value",
												"journalAssociation.journal.types[0].value": "journalAssociation.journal.types[0].value",
												"journalAssociation.journal.types[0].pureId": "journalAssociation.journal.types[0].pureId",
												"journalAssociation.journal.types[0].uri": "journalAssociation.journal.types[0].uri",
												"journalNumber": "journalNumber",
												"totalNumberOfAuthors": "totalNumberOfAuthors",
												"types[0].value": "types[0].value",
												"types[0].pureId": "types[0].pureId",
												"types[0].uri": "types[0].uri",
												"categories[0].value": "categories[0].value",
												"categories[0].pureId": "categories[0].pureId",
												"categories[0].uri": "categories[0].uri",
												"publicationStatuses[0].pureId": "publicationStatuses[0].pureId",
												"publicationStatuses[0].externalId": "publicationStatuses[0].externalId",
												"publicationStatuses[0].externalIdSource": "publicationStatuses[0].externalIdSource",
												"publicationStatuses[0].current": "publicationStatuses[0].current",
												"publicationStatuses[0].publicationDate.year": "publicationStatuses[0].publicationDate.year",
												"publicationStatuses[0].publicationStatuses[0].value": "publicationStatuses[0].publicationStatuses[0].value",
												"publicationStatuses[0].publicationStatuses[0].pureId": "publicationStatuses[0].publicationStatuses[0].pureId",
												"publicationStatuses[0].publicationStatuses[0].uri": "publicationStatuses[0].publicationStatuses[0].uri",
												"languages[0].value": "languages[0].value",
												"languages[0].pureId": "languages[0].pureId",
												"languages[0].uri": "languages[0].uri",
												"personAssociations[0].pureId": "personAssociations[0].pureId",
												"personAssociations[0].externalPerson.uuid": "personAssociations[0].externalPerson.uuid",
												"personAssociations[0].externalPerson.link.ref": "personAssociations[0].externalPerson.link.ref",
												"personAssociations[0].externalPerson.link.href": "personAssociations[0].externalPerson.link.href",
												"personAssociations[0].externalPerson.externalId": "personAssociations[0].externalPerson.externalId",
												"personAssociations[0].externalPerson.externalIdSource": "personAssociations[0].externalPerson.externalIdSource",
												"personAssociations[0].externalPerson.names[0].value": "personAssociations[0].externalPerson.names[0].value",
												"personAssociations[0].externalPerson.types[0].value": "personAssociations[0].externalPerson.types[0].value",
												"personAssociations[0].externalPerson.types[0].pureId": "personAssociations[0].externalPerson.types[0].pureId",
												"personAssociations[0].externalPerson.types[0].uri": "personAssociations[0].externalPerson.types[0].uri",
												"personAssociations[0].name.firstName": "personAssociations[0].name.firstName",
												"personAssociations[0].name.lastName": "personAssociations[0].name.lastName",
												"personAssociations[0].personRoles[0].value": "personAssociations[0].personRoles[0].value",
												"personAssociations[0].personRoles[0].pureId": "personAssociations[0].personRoles[0].pureId",
												"personAssociations[0].personRoles[0].uri": "personAssociations[0].personRoles[0].uri",
												"personAssociations[0].externalOrganisations[0].uuid": "personAssociations[0].externalOrganisations[0].uuid",
												"personAssociations[0].externalOrganisations[0].link.ref": "personAssociations[0].externalOrganisations[0].link.ref",
												"personAssociations[0].externalOrganisations[0].link.href": "personAssociations[0].externalOrganisations[0].link.href",
												"personAssociations[0].externalOrganisations[0].externalId": "personAssociations[0].externalOrganisations[0].externalId",
												"personAssociations[0].externalOrganisations[0].externalIdSource": "personAssociations[0].externalOrganisations[0].externalIdSource",
												"personAssociations[0].externalOrganisations[0].names[0].value": "personAssociations[0].externalOrganisations[0].names[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].value": "personAssociations[0].externalOrganisations[0].types[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].pureId": "personAssociations[0].externalOrganisations[0].types[0].pureId",
												"personAssociations[0].externalOrganisations[0].types[0].uri": "personAssociations[0].externalOrganisations[0].types[0].uri",
												"organisationalUnits[0].uuid": "organisationalUnits[0].uuid",
												"organisationalUnits[0].link.ref": "organisationalUnits[0].link.ref",
												"organisationalUnits[0].link.href": "organisationalUnits[0].link.href",
												"organisationalUnits[0].externalId": "organisationalUnits[0].externalId",
												"organisationalUnits[0].externalIdSource": "organisationalUnits[0].externalIdSource",
												"organisationalUnits[0].names[0].value": "organisationalUnits[0].names[0].value",
												"organisationalUnits[0].types[0].value": "organisationalUnits[0].types[0].value",
												"organisationalUnits[0].types[0].pureId": "organisationalUnits[0].types[0].pureId",
												"organisationalUnits[0].types[0].uri": "organisationalUnits[0].types[0].uri",
												"externalOrganisations[0].uuid": "externalOrganisations[0].uuid",
												"externalOrganisations[0].link.ref": "externalOrganisations[0].link.ref",
												"externalOrganisations[0].link.href": "externalOrganisations[0].link.href",
												"externalOrganisations[0].externalId": "externalOrganisations[0].externalId",
												"externalOrganisations[0].externalIdSource": "externalOrganisations[0].externalIdSource",
												"externalOrganisations[0].names[0].value": "externalOrganisations[0].names[0].value",
												"externalOrganisations[0].types[0].value": "externalOrganisations[0].types[0].value",
												"externalOrganisations[0].types[0].pureId": "externalOrganisations[0].types[0].pureId",
												"externalOrganisations[0].types[0].uri": "externalOrganisations[0].types[0].uri",
												"openAccessPermissions[0].value": "openAccessPermissions[0].value",
												"openAccessPermissions[0].pureId": "openAccessPermissions[0].pureId",
												"openAccessPermissions[0].uri": "openAccessPermissions[0].uri",
												"keywordGroups[0].pureId": "keywordGroups[0].pureId",
												"keywordGroups[0].logicalName": "keywordGroups[0].logicalName",
												"keywordGroups[0].types[0].value": "keywordGroups[0].types[0].value",
												"keywordGroups[0].types[0].uri": "keywordGroups[0].types[0].uri",
												"keywordGroups[0].keywordContainers[0].pureId": "keywordGroups[0].keywordContainers[0].pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.pureId": "keywordGroups[0].keywordContainers[0].structuredKeyword.pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.uri": "keywordGroups[0].keywordContainers[0].structuredKeyword.uri",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.disabled": "keywordGroups[0].keywordContainers[0].structuredKeyword.disabled",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value",
												"visibilities[0].value": "visibilities[0].value",
												"visibilities[0].key": "visibilities[0].key",
												"workflows[0].value": "workflows[0].value",
												"workflows[0].workflowStep": "workflows[0].workflowStep",
												"$.navigationLinks[0].ref": "$.navigationLinks[0].ref",
												"$.navigationLinks[0].href": "$.navigationLinks[0].href"
											},
											"collectionReference": "$.items"
										}
									},
									"inputs": [
										{
											"referenceName": "REST_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"RelativeUrl": {
													"value": "@activity('Translate JSON Variables').output.result.SecondPageRelativeUrl",
													"type": "Expression"
												},
												"PaginationJsonPath": {
													"value": "@activity('Translate JSON Variables').output.result.PaginationJsonPath",
													"type": "Expression"
												},
												"ApiKey": {
													"value": "@activity('Translate JSON Variables').output.result.ApiKey",
													"type": "Expression"
												},
												"Authorization": {
													"value": "@activity('Translate JSON Variables').output.result.Authorization",
													"type": "Expression"
												},
												"BaseUrl": {
													"value": "@activity('Translate JSON Variables').output.result.BaseUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JsonFile_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}-remainder.json",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Save to History",
									"description": "Save to History if required.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get all other pages from REST API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Translate JSON Variables').output.result.SaveToHistory, 'True')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Add DataDate and Save to History",
												"type": "DatabricksNotebook",
												"dependsOn": [
													{
														"activity": "Lookup the Data Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"notebookPath": "/Analytics/_Add DataDate and Save to History",
													"baseParameters": {
														"Scope": {
															"value": "@activity('Translate JSON Variables').output.result.Scope",
															"type": "Expression"
														},
														"SourceSystem": {
															"value": "@activity('Translate JSON Variables').output.result.SourceSystem",
															"type": "Expression"
														},
														"Entity": {
															"value": "@activity('Translate JSON Variables').output.result.EntityName",
															"type": "Expression"
														},
														"DataDate": {
															"value": "@string(activity('Lookup the Data Date').output.firstRow.DataDate)",
															"type": "Expression"
														},
														"FileFormat": {
															"value": "@activity('Translate JSON Variables').output.result.FileFormat",
															"type": "Expression"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureDatabricks",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Lookup the Data Date",
												"description": "Read the Control table that specifies which date this data pertains to.",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@activity('Translate JSON Variables').output.result.DataDateQuery",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "ControlDB_Dataset",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											}
										]
									}
								},
								{
									"name": "Indicate Failure 3",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Save to History",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Save to History').errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure 1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get the first page from REST API",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Get the first page from REST API').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "7"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 7 - REST API to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extract data from a REST API into JSON format in Azure Blob Storage.",
				"activities": [
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Process Entities",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get all other pages from REST API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName} - Pages read: @{add(int(activity('Get all other pages from REST API').output.rowsRead), 1)} | Pages written: @{add(int(activity('Get all other pages from REST API').output.rowsCopied), 1)}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get all other pages from REST API",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' | Entity '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' | @{activity('Get all other pages from REST API').output.errors[0].Message}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get the first page from REST API",
									"description": "A dummy NextPageUrl is used to ensure that only a single page is returned.  The other pages are returned in the second GET from the REST API.  \nThis is done since there is no way (yet) to use an expression in the determination of NextPageUrl and the nature of the JSON response may make it hard to determine the right JSON node to use for NextPageUrl without an expression.  ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"schemaMapping": {
												"$.pageInformation.offset": "$.pageInformation.offset",
												"$.pageInformation.size": "$.pageInformation.size",
												"pureId": "pureId",
												"externalId": "externalId",
												"externalIdSource": "externalIdSource",
												"uuid": "uuid",
												"title": "title",
												"peerReview": "peerReview",
												"numberOfPages": "numberOfPages",
												"managingOrganisationalUnit.uuid": "managingOrganisationalUnit.uuid",
												"managingOrganisationalUnit.link.ref": "managingOrganisationalUnit.link.ref",
												"managingOrganisationalUnit.link.href": "managingOrganisationalUnit.link.href",
												"managingOrganisationalUnit.externalId": "managingOrganisationalUnit.externalId",
												"managingOrganisationalUnit.externalIdSource": "managingOrganisationalUnit.externalIdSource",
												"managingOrganisationalUnit.names[0].value": "managingOrganisationalUnit.names[0].value",
												"managingOrganisationalUnit.types[0].value": "managingOrganisationalUnit.types[0].value",
												"managingOrganisationalUnit.types[0].pureId": "managingOrganisationalUnit.types[0].pureId",
												"managingOrganisationalUnit.types[0].uri": "managingOrganisationalUnit.types[0].uri",
												"confidential": "confidential",
												"info.createdBy": "info.createdBy",
												"info.createdDate": "info.createdDate",
												"info.modifiedBy": "info.modifiedBy",
												"info.modifiedDate": "info.modifiedDate",
												"info.portalUrl": "info.portalUrl",
												"info.additionalExternalIds[0].value": "info.additionalExternalIds[0].value",
												"info.additionalExternalIds[0].idSource": "info.additionalExternalIds[0].idSource",
												"pages": "pages",
												"volume": "volume",
												"journalAssociation.pureId": "journalAssociation.pureId",
												"journalAssociation.title.value": "journalAssociation.title.value",
												"journalAssociation.issn.value": "journalAssociation.issn.value",
												"journalAssociation.journal.uuid": "journalAssociation.journal.uuid",
												"journalAssociation.journal.link.ref": "journalAssociation.journal.link.ref",
												"journalAssociation.journal.link.href": "journalAssociation.journal.link.href",
												"journalAssociation.journal.externalId": "journalAssociation.journal.externalId",
												"journalAssociation.journal.externalIdSource": "journalAssociation.journal.externalIdSource",
												"journalAssociation.journal.names[0].value": "journalAssociation.journal.names[0].value",
												"journalAssociation.journal.types[0].value": "journalAssociation.journal.types[0].value",
												"journalAssociation.journal.types[0].pureId": "journalAssociation.journal.types[0].pureId",
												"journalAssociation.journal.types[0].uri": "journalAssociation.journal.types[0].uri",
												"journalNumber": "journalNumber",
												"totalNumberOfAuthors": "totalNumberOfAuthors",
												"types[0].value": "types[0].value",
												"types[0].pureId": "types[0].pureId",
												"types[0].uri": "types[0].uri",
												"categories[0].value": "categories[0].value",
												"categories[0].pureId": "categories[0].pureId",
												"categories[0].uri": "categories[0].uri",
												"publicationStatuses[0].pureId": "publicationStatuses[0].pureId",
												"publicationStatuses[0].externalId": "publicationStatuses[0].externalId",
												"publicationStatuses[0].externalIdSource": "publicationStatuses[0].externalIdSource",
												"publicationStatuses[0].current": "publicationStatuses[0].current",
												"publicationStatuses[0].publicationDate.year": "publicationStatuses[0].publicationDate.year",
												"publicationStatuses[0].publicationStatuses[0].value": "publicationStatuses[0].publicationStatuses[0].value",
												"publicationStatuses[0].publicationStatuses[0].pureId": "publicationStatuses[0].publicationStatuses[0].pureId",
												"publicationStatuses[0].publicationStatuses[0].uri": "publicationStatuses[0].publicationStatuses[0].uri",
												"languages[0].value": "languages[0].value",
												"languages[0].pureId": "languages[0].pureId",
												"languages[0].uri": "languages[0].uri",
												"personAssociations[0].pureId": "personAssociations[0].pureId",
												"personAssociations[0].externalPerson.uuid": "personAssociations[0].externalPerson.uuid",
												"personAssociations[0].externalPerson.link.ref": "personAssociations[0].externalPerson.link.ref",
												"personAssociations[0].externalPerson.link.href": "personAssociations[0].externalPerson.link.href",
												"personAssociations[0].externalPerson.externalId": "personAssociations[0].externalPerson.externalId",
												"personAssociations[0].externalPerson.externalIdSource": "personAssociations[0].externalPerson.externalIdSource",
												"personAssociations[0].externalPerson.names[0].value": "personAssociations[0].externalPerson.names[0].value",
												"personAssociations[0].externalPerson.types[0].value": "personAssociations[0].externalPerson.types[0].value",
												"personAssociations[0].externalPerson.types[0].pureId": "personAssociations[0].externalPerson.types[0].pureId",
												"personAssociations[0].externalPerson.types[0].uri": "personAssociations[0].externalPerson.types[0].uri",
												"personAssociations[0].name.firstName": "personAssociations[0].name.firstName",
												"personAssociations[0].name.lastName": "personAssociations[0].name.lastName",
												"personAssociations[0].personRoles[0].value": "personAssociations[0].personRoles[0].value",
												"personAssociations[0].personRoles[0].pureId": "personAssociations[0].personRoles[0].pureId",
												"personAssociations[0].personRoles[0].uri": "personAssociations[0].personRoles[0].uri",
												"personAssociations[0].externalOrganisations[0].uuid": "personAssociations[0].externalOrganisations[0].uuid",
												"personAssociations[0].externalOrganisations[0].link.ref": "personAssociations[0].externalOrganisations[0].link.ref",
												"personAssociations[0].externalOrganisations[0].link.href": "personAssociations[0].externalOrganisations[0].link.href",
												"personAssociations[0].externalOrganisations[0].externalId": "personAssociations[0].externalOrganisations[0].externalId",
												"personAssociations[0].externalOrganisations[0].externalIdSource": "personAssociations[0].externalOrganisations[0].externalIdSource",
												"personAssociations[0].externalOrganisations[0].names[0].value": "personAssociations[0].externalOrganisations[0].names[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].value": "personAssociations[0].externalOrganisations[0].types[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].pureId": "personAssociations[0].externalOrganisations[0].types[0].pureId",
												"personAssociations[0].externalOrganisations[0].types[0].uri": "personAssociations[0].externalOrganisations[0].types[0].uri",
												"organisationalUnits[0].uuid": "organisationalUnits[0].uuid",
												"organisationalUnits[0].link.ref": "organisationalUnits[0].link.ref",
												"organisationalUnits[0].link.href": "organisationalUnits[0].link.href",
												"organisationalUnits[0].externalId": "organisationalUnits[0].externalId",
												"organisationalUnits[0].externalIdSource": "organisationalUnits[0].externalIdSource",
												"organisationalUnits[0].names[0].value": "organisationalUnits[0].names[0].value",
												"organisationalUnits[0].types[0].value": "organisationalUnits[0].types[0].value",
												"organisationalUnits[0].types[0].pureId": "organisationalUnits[0].types[0].pureId",
												"organisationalUnits[0].types[0].uri": "organisationalUnits[0].types[0].uri",
												"externalOrganisations[0].uuid": "externalOrganisations[0].uuid",
												"externalOrganisations[0].link.ref": "externalOrganisations[0].link.ref",
												"externalOrganisations[0].link.href": "externalOrganisations[0].link.href",
												"externalOrganisations[0].externalId": "externalOrganisations[0].externalId",
												"externalOrganisations[0].externalIdSource": "externalOrganisations[0].externalIdSource",
												"externalOrganisations[0].names[0].value": "externalOrganisations[0].names[0].value",
												"externalOrganisations[0].types[0].value": "externalOrganisations[0].types[0].value",
												"externalOrganisations[0].types[0].pureId": "externalOrganisations[0].types[0].pureId",
												"externalOrganisations[0].types[0].uri": "externalOrganisations[0].types[0].uri",
												"openAccessPermissions[0].value": "openAccessPermissions[0].value",
												"openAccessPermissions[0].pureId": "openAccessPermissions[0].pureId",
												"openAccessPermissions[0].uri": "openAccessPermissions[0].uri",
												"keywordGroups[0].pureId": "keywordGroups[0].pureId",
												"keywordGroups[0].logicalName": "keywordGroups[0].logicalName",
												"keywordGroups[0].types[0].value": "keywordGroups[0].types[0].value",
												"keywordGroups[0].types[0].uri": "keywordGroups[0].types[0].uri",
												"keywordGroups[0].keywordContainers[0].pureId": "keywordGroups[0].keywordContainers[0].pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.pureId": "keywordGroups[0].keywordContainers[0].structuredKeyword.pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.uri": "keywordGroups[0].keywordContainers[0].structuredKeyword.uri",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.disabled": "keywordGroups[0].keywordContainers[0].structuredKeyword.disabled",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value",
												"visibilities[0].value": "visibilities[0].value",
												"visibilities[0].key": "visibilities[0].key",
												"workflows[0].value": "workflows[0].value",
												"workflows[0].workflowStep": "workflows[0].workflowStep",
												"$.navigationLinks[0].ref": "$.navigationLinks[0].ref",
												"$.navigationLinks[0].href": "$.navigationLinks[0].href"
											},
											"collectionReference": "$.items"
										}
									},
									"inputs": [
										{
											"referenceName": "REST_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"RelativeUrl": {
													"value": "@activity('Translate JSON Variables').output.result.RelativeUrl",
													"type": "Expression"
												},
												"PaginationJsonPath": "$.dummy-no-paging",
												"ApiKey": {
													"value": "@activity('Translate JSON Variables').output.result.ApiKey",
													"type": "Expression"
												},
												"Authorization": {
													"value": "@activity('Translate JSON Variables').output.result.Authorization",
													"type": "Expression"
												},
												"BaseUrl": {
													"value": "@activity('Translate JSON Variables').output.result.BaseUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JsonFile_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}-page1.json",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get all other pages from REST API",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get the first page from REST API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010"
										},
										"sink": {
											"type": "AzureBlobFSSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"schemaMapping": {
												"$.pageInformation.offset": "$.pageInformation.offset",
												"$.pageInformation.size": "$.pageInformation.size",
												"pureId": "pureId",
												"externalId": "externalId",
												"externalIdSource": "externalIdSource",
												"uuid": "uuid",
												"title": "title",
												"peerReview": "peerReview",
												"numberOfPages": "numberOfPages",
												"managingOrganisationalUnit.uuid": "managingOrganisationalUnit.uuid",
												"managingOrganisationalUnit.link.ref": "managingOrganisationalUnit.link.ref",
												"managingOrganisationalUnit.link.href": "managingOrganisationalUnit.link.href",
												"managingOrganisationalUnit.externalId": "managingOrganisationalUnit.externalId",
												"managingOrganisationalUnit.externalIdSource": "managingOrganisationalUnit.externalIdSource",
												"managingOrganisationalUnit.names[0].value": "managingOrganisationalUnit.names[0].value",
												"managingOrganisationalUnit.types[0].value": "managingOrganisationalUnit.types[0].value",
												"managingOrganisationalUnit.types[0].pureId": "managingOrganisationalUnit.types[0].pureId",
												"managingOrganisationalUnit.types[0].uri": "managingOrganisationalUnit.types[0].uri",
												"confidential": "confidential",
												"info.createdBy": "info.createdBy",
												"info.createdDate": "info.createdDate",
												"info.modifiedBy": "info.modifiedBy",
												"info.modifiedDate": "info.modifiedDate",
												"info.portalUrl": "info.portalUrl",
												"info.additionalExternalIds[0].value": "info.additionalExternalIds[0].value",
												"info.additionalExternalIds[0].idSource": "info.additionalExternalIds[0].idSource",
												"pages": "pages",
												"volume": "volume",
												"journalAssociation.pureId": "journalAssociation.pureId",
												"journalAssociation.title.value": "journalAssociation.title.value",
												"journalAssociation.issn.value": "journalAssociation.issn.value",
												"journalAssociation.journal.uuid": "journalAssociation.journal.uuid",
												"journalAssociation.journal.link.ref": "journalAssociation.journal.link.ref",
												"journalAssociation.journal.link.href": "journalAssociation.journal.link.href",
												"journalAssociation.journal.externalId": "journalAssociation.journal.externalId",
												"journalAssociation.journal.externalIdSource": "journalAssociation.journal.externalIdSource",
												"journalAssociation.journal.names[0].value": "journalAssociation.journal.names[0].value",
												"journalAssociation.journal.types[0].value": "journalAssociation.journal.types[0].value",
												"journalAssociation.journal.types[0].pureId": "journalAssociation.journal.types[0].pureId",
												"journalAssociation.journal.types[0].uri": "journalAssociation.journal.types[0].uri",
												"journalNumber": "journalNumber",
												"totalNumberOfAuthors": "totalNumberOfAuthors",
												"types[0].value": "types[0].value",
												"types[0].pureId": "types[0].pureId",
												"types[0].uri": "types[0].uri",
												"categories[0].value": "categories[0].value",
												"categories[0].pureId": "categories[0].pureId",
												"categories[0].uri": "categories[0].uri",
												"publicationStatuses[0].pureId": "publicationStatuses[0].pureId",
												"publicationStatuses[0].externalId": "publicationStatuses[0].externalId",
												"publicationStatuses[0].externalIdSource": "publicationStatuses[0].externalIdSource",
												"publicationStatuses[0].current": "publicationStatuses[0].current",
												"publicationStatuses[0].publicationDate.year": "publicationStatuses[0].publicationDate.year",
												"publicationStatuses[0].publicationStatuses[0].value": "publicationStatuses[0].publicationStatuses[0].value",
												"publicationStatuses[0].publicationStatuses[0].pureId": "publicationStatuses[0].publicationStatuses[0].pureId",
												"publicationStatuses[0].publicationStatuses[0].uri": "publicationStatuses[0].publicationStatuses[0].uri",
												"languages[0].value": "languages[0].value",
												"languages[0].pureId": "languages[0].pureId",
												"languages[0].uri": "languages[0].uri",
												"personAssociations[0].pureId": "personAssociations[0].pureId",
												"personAssociations[0].externalPerson.uuid": "personAssociations[0].externalPerson.uuid",
												"personAssociations[0].externalPerson.link.ref": "personAssociations[0].externalPerson.link.ref",
												"personAssociations[0].externalPerson.link.href": "personAssociations[0].externalPerson.link.href",
												"personAssociations[0].externalPerson.externalId": "personAssociations[0].externalPerson.externalId",
												"personAssociations[0].externalPerson.externalIdSource": "personAssociations[0].externalPerson.externalIdSource",
												"personAssociations[0].externalPerson.names[0].value": "personAssociations[0].externalPerson.names[0].value",
												"personAssociations[0].externalPerson.types[0].value": "personAssociations[0].externalPerson.types[0].value",
												"personAssociations[0].externalPerson.types[0].pureId": "personAssociations[0].externalPerson.types[0].pureId",
												"personAssociations[0].externalPerson.types[0].uri": "personAssociations[0].externalPerson.types[0].uri",
												"personAssociations[0].name.firstName": "personAssociations[0].name.firstName",
												"personAssociations[0].name.lastName": "personAssociations[0].name.lastName",
												"personAssociations[0].personRoles[0].value": "personAssociations[0].personRoles[0].value",
												"personAssociations[0].personRoles[0].pureId": "personAssociations[0].personRoles[0].pureId",
												"personAssociations[0].personRoles[0].uri": "personAssociations[0].personRoles[0].uri",
												"personAssociations[0].externalOrganisations[0].uuid": "personAssociations[0].externalOrganisations[0].uuid",
												"personAssociations[0].externalOrganisations[0].link.ref": "personAssociations[0].externalOrganisations[0].link.ref",
												"personAssociations[0].externalOrganisations[0].link.href": "personAssociations[0].externalOrganisations[0].link.href",
												"personAssociations[0].externalOrganisations[0].externalId": "personAssociations[0].externalOrganisations[0].externalId",
												"personAssociations[0].externalOrganisations[0].externalIdSource": "personAssociations[0].externalOrganisations[0].externalIdSource",
												"personAssociations[0].externalOrganisations[0].names[0].value": "personAssociations[0].externalOrganisations[0].names[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].value": "personAssociations[0].externalOrganisations[0].types[0].value",
												"personAssociations[0].externalOrganisations[0].types[0].pureId": "personAssociations[0].externalOrganisations[0].types[0].pureId",
												"personAssociations[0].externalOrganisations[0].types[0].uri": "personAssociations[0].externalOrganisations[0].types[0].uri",
												"organisationalUnits[0].uuid": "organisationalUnits[0].uuid",
												"organisationalUnits[0].link.ref": "organisationalUnits[0].link.ref",
												"organisationalUnits[0].link.href": "organisationalUnits[0].link.href",
												"organisationalUnits[0].externalId": "organisationalUnits[0].externalId",
												"organisationalUnits[0].externalIdSource": "organisationalUnits[0].externalIdSource",
												"organisationalUnits[0].names[0].value": "organisationalUnits[0].names[0].value",
												"organisationalUnits[0].types[0].value": "organisationalUnits[0].types[0].value",
												"organisationalUnits[0].types[0].pureId": "organisationalUnits[0].types[0].pureId",
												"organisationalUnits[0].types[0].uri": "organisationalUnits[0].types[0].uri",
												"externalOrganisations[0].uuid": "externalOrganisations[0].uuid",
												"externalOrganisations[0].link.ref": "externalOrganisations[0].link.ref",
												"externalOrganisations[0].link.href": "externalOrganisations[0].link.href",
												"externalOrganisations[0].externalId": "externalOrganisations[0].externalId",
												"externalOrganisations[0].externalIdSource": "externalOrganisations[0].externalIdSource",
												"externalOrganisations[0].names[0].value": "externalOrganisations[0].names[0].value",
												"externalOrganisations[0].types[0].value": "externalOrganisations[0].types[0].value",
												"externalOrganisations[0].types[0].pureId": "externalOrganisations[0].types[0].pureId",
												"externalOrganisations[0].types[0].uri": "externalOrganisations[0].types[0].uri",
												"openAccessPermissions[0].value": "openAccessPermissions[0].value",
												"openAccessPermissions[0].pureId": "openAccessPermissions[0].pureId",
												"openAccessPermissions[0].uri": "openAccessPermissions[0].uri",
												"keywordGroups[0].pureId": "keywordGroups[0].pureId",
												"keywordGroups[0].logicalName": "keywordGroups[0].logicalName",
												"keywordGroups[0].types[0].value": "keywordGroups[0].types[0].value",
												"keywordGroups[0].types[0].uri": "keywordGroups[0].types[0].uri",
												"keywordGroups[0].keywordContainers[0].pureId": "keywordGroups[0].keywordContainers[0].pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.pureId": "keywordGroups[0].keywordContainers[0].structuredKeyword.pureId",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.uri": "keywordGroups[0].keywordContainers[0].structuredKeyword.uri",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.disabled": "keywordGroups[0].keywordContainers[0].structuredKeyword.disabled",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.terms[0].value",
												"keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value": "keywordGroups[0].keywordContainers[0].structuredKeyword.descriptions[0].value",
												"visibilities[0].value": "visibilities[0].value",
												"visibilities[0].key": "visibilities[0].key",
												"workflows[0].value": "workflows[0].value",
												"workflows[0].workflowStep": "workflows[0].workflowStep",
												"$.navigationLinks[0].ref": "$.navigationLinks[0].ref",
												"$.navigationLinks[0].href": "$.navigationLinks[0].href"
											},
											"collectionReference": "$.items"
										}
									},
									"inputs": [
										{
											"referenceName": "REST_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"RelativeUrl": {
													"value": "@activity('Translate JSON Variables').output.result.SecondPageRelativeUrl",
													"type": "Expression"
												},
												"PaginationJsonPath": {
													"value": "@activity('Translate JSON Variables').output.result.PaginationJsonPath",
													"type": "Expression"
												},
												"ApiKey": {
													"value": "@activity('Translate JSON Variables').output.result.ApiKey",
													"type": "Expression"
												},
												"Authorization": {
													"value": "@activity('Translate JSON Variables').output.result.Authorization",
													"type": "Expression"
												},
												"BaseUrl": {
													"value": "@activity('Translate JSON Variables').output.result.BaseUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JsonFile_Dataset",
											"type": "DatasetReference",
											"parameters": {
												"FilePath": {
													"value": "@{activity('Translate JSON Variables').output.result.Scope}/@{activity('Translate JSON Variables').output.result.SourceSystem}/@{activity('Translate JSON Variables').output.result.EntityName}/Current",
													"type": "Expression"
												},
												"FileName": {
													"value": "@{activity('Translate JSON Variables').output.result.EntityName}-remainder.json",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Archive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 8 - Deconstruct JSON into Tabular Form in Data Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Save the Current data into History folder and deconstruct the JSON file into a Table.",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Deconstruct JSON into Table",
									"description": "This Notebook will record History and deconstruct the JSON structure into a tabular format.",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Lookup the Data Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Analytics/_Deconstruct JSON to Table",
										"baseParameters": {
											"SourceSystem": {
												"value": "@activity('Translate JSON Variables').output.result.SourceSystem",
												"type": "Expression"
											},
											"EntityName": {
												"value": "@activity('Translate JSON Variables').output.result.EntityName",
												"type": "Expression"
											},
											"Scope": {
												"value": "@activity('Translate JSON Variables').output.result.Scope",
												"type": "Expression"
											},
											"DeconstructionSql": {
												"value": "@activity('Translate JSON Variables').output.result.DeconstructionSql",
												"type": "Expression"
											},
											"DeconstructedTableName": {
												"value": "@activity('Translate JSON Variables').output.result.DeconstructedTableName",
												"type": "Expression"
											},
											"DataDate": {
												"value": "@string(activity('Lookup the Data Date').output.firstRow.DataDate)",
												"type": "Expression"
											},
											"SaveToHistory": {
												"value": "@activity('Translate JSON Variables').output.result.SaveToHistory",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Deconstruct JSON into Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Success in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' - Databricks Runsheet URL: @{activity('Deconstruct JSON into Table').output.runPageUrl} | Runtime (ms):  @{activity('Deconstruct JSON into Table').output.executionDuration}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Deconstruct JSON into Table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SourceSystem}.@{activity('Translate JSON Variables').output.result.EntityName}' - Databricks Runsheet URL: @{activity('Deconstruct JSON into Table').output.runPageUrl} | Runtime (ms):  @{activity('Deconstruct JSON into Table').output.executionDuration}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Lookup the Data Date",
									"description": "Read the Control table that specifies which date this data pertains to.",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@activity('Translate JSON Variables').output.result.DataDateQuery",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "3"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "8"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/_Process Type 9 - Execute Sproc in Control Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execute a Stored Procedure in the Control Database.\n\nThe HasProcessed flag on the Entity will be set to True if the Stored Procedure does not return an error.",
				"activities": [
					{
						"name": "Process Entity",
						"description": "Process each individual Entity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter out Invalid Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter out Invalid Entities').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Process Start Time",
									"description": "Set the LastRunStartTime for this Entity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityProcessStartTime]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Translate JSON Variables",
									"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Set Process Start Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "TranslateVariables",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Stored Procedure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Result": {
												"value": "Success",
												"type": "String"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Success in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SprocToExecute}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Indicate Failure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Stored Procedure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Process].[up_UpdateEntityDiagnostics]",
										"storedProcedureParameters": {
											"EntityKey": {
												"value": {
													"value": "@item().EntityKey",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ExecutionMessage": {
												"value": {
													"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.SprocToExecute}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Result": {
												"value": "Failure",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Execute Stored Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Translate JSON Variables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@activity('Translate JSON Variables').output.result.SprocToExecute",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Get Entities to Process",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Process].[up_GetEntitiesToProcess]",
								"storedProcedureParameters": {
									"BatchSize": {
										"type": "Int32",
										"value": "999999"
									},
									"EntityGroupKeyList": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.EntityGroupKeyList",
											"type": "Expression"
										}
									},
									"ProcessTypeKey": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessTypeKey')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter out Invalid Entities",
						"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Entities to Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Entities to Process').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item().EntityKey, 0)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"EntityGroupKeyList": {
						"type": "String",
						"defaultValue": "5"
					}
				},
				"variables": {
					"ProcessTypeKey": {
						"type": "String",
						"defaultValue": "9"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Research Now')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Research Now",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 7 - ETL - REST API to Data Lake",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "[parameters('Trigger - Research Now_properties__Process Type 7 - ETL - REST API to Data Lake_parameters_EntityGroupKeyList')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T08:54:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0,
								15,
								30,
								45
							],
							"hours": [
								14,
								15,
								16,
								17,
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/_Process Type 7 - ETL - REST API to Data Lake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Reset Processing Framework')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Reset to False the HasProcessed and IsProcessing flags of the Process.Entity table.  This will prepare the Processing Framework to begin once local time has passed midnight (handled by another Trigger).",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 9 - Execute Sproc in Control Database",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "[parameters('Trigger - Reset Processing Framework_properties__Process Type 9 - Execute Sproc in Control Database_parameters_EntityGroupKeyList')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T22:06:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								35,
								45
							],
							"hours": [
								12,
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/_Process Type 9 - Execute Sproc in Control Database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger - Start of Day Processing')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The trigger is looking for Start of Day (once local time has clocked past midnight).  When this happens, it allows the Process Framework to begin for the day.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "_Process Type 9 - Execute Sproc in Control Database",
							"type": "PipelineReference"
						},
						"parameters": {
							"EntityGroupKeyList": "[parameters('Trigger - Start of Day Processing_properties__Process Type 9 - Execute Sproc in Control Database_parameters_EntityGroupKeyList')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T22:02:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								35,
								45
							],
							"hours": [
								13,
								14
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/_Process Type 9 - Execute Sproc in Control Database')]"
			]
		}
	]
}