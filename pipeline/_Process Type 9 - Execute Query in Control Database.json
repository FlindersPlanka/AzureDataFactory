{
	"name": "_Process Type 9 - Execute Query in Control Database",
	"properties": {
		"description": "Execute a Query in the Control Database.\n\nIt is assumed that the query will return a recordset with two columns: Result (tinyint) and Message (varchar).  If Result is 0, the query is assumed to have executed successfully and HasProcessed will be set to 1.  If Result is 1, the query is assumed to have not run successfully and thus HasProcessed will not be set. ",
		"activities": [
			{
				"name": "Process Entity",
				"description": "Process each individual Entity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter out Invalid Entities",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter out Invalid Entities').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Set Process Start Time",
							"description": "Set the LastRunStartTime for this Entity",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Process].[up_UpdateEntityProcessStartTime]",
								"storedProcedureParameters": {
									"EntityKey": {
										"value": {
											"value": "@item().EntityKey",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ControlDB",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Translate JSON Variables",
							"description": "Accept four parameters, VariablesJSON, OverrideVariablesJSON, ConfigurationJSON and DefaultsJSON and translate into a recordset where the columns are a representation of the nodes in the resultant JSON.",
							"type": "AzureFunctionActivity",
							"dependsOn": [
								{
									"activity": "Set Process Start Time",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "TranslateVariables",
								"method": "POST",
								"body": {
									"value": "@item()",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureFunctions",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Execute Query",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Translate JSON Variables",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@activity('Translate JSON Variables').output.result.QueryToExecute",
										"type": "Expression"
									}
								},
								"dataset": {
									"referenceName": "ControlDB_Dataset",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Check Query Execution Result",
							"description": "The Query is assumed to return a single row recordset containing two columns, Result and Message.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Execute Query",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(activity('Execute Query').output.firstRow.Result, 0)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Indicate Failure",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[Process].[up_UpdateEntityDiagnostics]",
											"storedProcedureParameters": {
												"EntityKey": {
													"value": {
														"value": "@item().EntityKey",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"ExecutionMessage": {
													"value": {
														"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute} - @{activity('Execute Query').output.firstRow.Message}",
														"type": "Expression"
													},
													"type": "String"
												},
												"Result": {
													"value": "Failure",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ControlDB",
											"type": "LinkedServiceReference"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Indicate Success",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[Process].[up_UpdateEntityDiagnostics]",
											"storedProcedureParameters": {
												"EntityKey": {
													"value": {
														"value": "@item().EntityKey",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"Result": {
													"value": "Success",
													"type": "String"
												},
												"ExecutionMessage": {
													"value": {
														"value": "Success in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute} - @{activity('Execute Query').output.firstRow.Message}",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "ControlDB",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "Indicate Failure",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Execute Query",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Process].[up_UpdateEntityDiagnostics]",
								"storedProcedureParameters": {
									"EntityKey": {
										"value": {
											"value": "@item().EntityKey",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionMessage": {
										"value": {
											"value": "Error in Data Factory '@{pipeline().DataFactory}' | Pipeline '@{pipeline().Pipeline}' for '@{activity('Translate JSON Variables').output.result.QueryToExecute} - @{activity('Execute Query').output.errors[0].Message}",
											"type": "Expression"
										},
										"type": "String"
									},
									"Result": {
										"value": "Failure",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ControlDB",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Get Entities to Process",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[Process].[up_GetEntitiesToProcess]",
						"storedProcedureParameters": {
							"BatchSize": {
								"type": "Int32",
								"value": "999999"
							},
							"EntityGroupKeyList": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.EntityGroupKeyList",
									"type": "Expression"
								}
							},
							"ProcessTypeKey": {
								"type": "Int32",
								"value": {
									"value": "@variables('ProcessTypeKey')",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "ControlDB_Dataset",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Filter out Invalid Entities",
				"description": "If the EntityKey < 0, filter out.  An EntityKey of -1 is used to indicate there are no Entities to Process.",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Entities to Process",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Entities to Process').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@greater(item().EntityKey, 0)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"EntityGroupKeyList": {
				"type": "String",
				"defaultValue": "5"
			}
		},
		"variables": {
			"ProcessTypeKey": {
				"type": "String",
				"defaultValue": "9"
			}
		},
		"folder": {
			"name": "Experimentation"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}